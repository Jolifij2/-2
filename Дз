#include <iostream>
#include <cmath>

using namespace std;

// Функция для метода половинного деления
// f - функция, для которой ищем корень
// a, b - начальный интервал, на котором ищем корень
// epsilon - требуемая точность
double bisection(double a, double b, double (*f)(double), double epsilon) {
    if (f(a) * f(b) >= 0) {
        return NAN; // Возвращаем NAN, если нет корня на интервале
    }

    double c;
    while (abs(b - a) >= epsilon) {
        c = (a + b) / 2.0;
        if (f(c) == 0) {
            return c; // Найден точный корень
        } else if (f(a) * f(c) < 0) {
            b = c;
        } else {
            a = c;
        }
    }
    return (a + b) / 2.0; // Возвращаем середину последнего интервала как приближенный корень
}


// Функция для метода простых итераций
// g - функция, к которой преобразовано уравнение x = g(x)
// x0 - начальное приближение
// epsilon - требуемая точность
// maxIterations - максимальное количество итераций
double simpleIteration(double x0, double (*g)(double), double epsilon, int maxIterations) {
    double x_prev = x0;
    double x_curr;

    for (int i = 0; i < maxIterations; ++i) {
        x_curr = g(x_prev);
        if (abs(x_curr - x_prev) < epsilon) {
            return x_curr; // Достигнута требуемая точность
        }
        x_prev = x_curr;
    }

    return NAN; // Не удалось достичь требуемой точности за maxIterations итераций
}


// Функция для решения уравнения 2^-x = sin(x)
double equation(double x) {
    return pow(2, -x) - sin(x);
}


// Функция для метода простых итераций, уравнение преобразовано к виду x=g(x)
// В данном случае x = -log2(sin(x))  или  x = asin(2^-x) -  важно чтобы g(x) сходилась

//Пример 1: x = -log2(sin(x))  (нужна коррекция, sin(x) должен быть положительным)
double g_iteration1(double x) {
     return -log2(sin(x)); // Некорректно, так как log2() не определен для отрицательных значений и 0
}

//Альтернативный пример, который лучше работает:  x = asin(2^-x)
double g_iteration2(double x) {
    return asin(pow(2, -x));
}
